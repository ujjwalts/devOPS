package com.config;

import java.util.Properties;
import javax.sql.DataSource;

import org.hibernate.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBuilder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.daoImpl.UserDaoImpl;
/*import com.daoImpl.UserDaoImpl;*/
import com.model.User;


@Configuration
@ComponentScan("com.*")
@EnableTransactionManagement
public class hibernateConfig{

@Autowired
@Bean(name="dataSource")//@Bean is used to mention or give or determine the behaviour of the pojo class with a particular bean name
public DataSource getH2DataSource()
{
System.out.println("Data Source Method");
DriverManagerDataSource dataSource = new DriverManagerDataSource();
dataSource.setDriverClassName("org.h2.Driver");
dataSource.setUrl("jdbc:h2:tcp://localhost/~/test");
dataSource.setUsername("sa");
dataSource.setPassword("");

System.out.println("Data Source Created");
return dataSource;
}
private Properties getHibernateProperties() {
Properties properties = new Properties();
properties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect"); 
properties.put("hibernate.show_sql", "true");   // //when you are using dialect you will be able to show what code is been generated by this dialect in the console
properties.put("hibernate.hbm2ddl.auto", "update");  //automatically the ddl statement is executed from  the dialect library // if the table exist than update otherwise it will create 
return properties;
}

@Autowired
@Bean(name = "sessionFactory")  //@Bean is used to mention or give or determine the behaviour of the pojo class with a particular bean name
public SessionFactory getSessionFactory(DataSource dataSource) {
LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource);   //
sessionBuilder.addProperties(getHibernateProperties()); //add the properties that is written line no 40-45
sessionBuilder.addAnnotatedClass(User.class); //take the reference of the user(model class)

//sessionBuilder.scanPackages("com.model");
return sessionBuilder.buildSessionFactory();
}




@Autowired
@Bean(name="UserDaoImpl")
public UserDaoImpl getUserDAO(SessionFactory sessionFactory)
{
return new UserDaoImpl(sessionFactory);
}




@Autowired
@Bean(name = "transactionManager")
public HibernateTransactionManager getTransactionManager(SessionFactory sessionFactory) {
HibernateTransactionManager transactionManager = new HibernateTransactionManager(sessionFactory);
return transactionManager;
}

}